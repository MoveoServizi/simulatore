# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simulator/event.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class event(genpy.Message):
  _md5sum = "11f9a94c34d2636c3fb0efd1e69990b4"
  _type = "simulator/event"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string generator_id
int32 ID
string type
time generation_date
string gen_time
time completed_date
string compl_time
string[] route
string split_attribute1
float32 split1
string split_attribute2
float32 split2
string split_attribute3
float32 split3

string attribute2
float32 value2
string attribute3
float32 value3


bool last_event
"""
  __slots__ = ['generator_id','ID','type','generation_date','gen_time','completed_date','compl_time','route','split_attribute1','split1','split_attribute2','split2','split_attribute3','split3','attribute2','value2','attribute3','value3','last_event']
  _slot_types = ['string','int32','string','time','string','time','string','string[]','string','float32','string','float32','string','float32','string','float32','string','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       generator_id,ID,type,generation_date,gen_time,completed_date,compl_time,route,split_attribute1,split1,split_attribute2,split2,split_attribute3,split3,attribute2,value2,attribute3,value3,last_event

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(event, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.generator_id is None:
        self.generator_id = ''
      if self.ID is None:
        self.ID = 0
      if self.type is None:
        self.type = ''
      if self.generation_date is None:
        self.generation_date = genpy.Time()
      if self.gen_time is None:
        self.gen_time = ''
      if self.completed_date is None:
        self.completed_date = genpy.Time()
      if self.compl_time is None:
        self.compl_time = ''
      if self.route is None:
        self.route = []
      if self.split_attribute1 is None:
        self.split_attribute1 = ''
      if self.split1 is None:
        self.split1 = 0.
      if self.split_attribute2 is None:
        self.split_attribute2 = ''
      if self.split2 is None:
        self.split2 = 0.
      if self.split_attribute3 is None:
        self.split_attribute3 = ''
      if self.split3 is None:
        self.split3 = 0.
      if self.attribute2 is None:
        self.attribute2 = ''
      if self.value2 is None:
        self.value2 = 0.
      if self.attribute3 is None:
        self.attribute3 = ''
      if self.value3 is None:
        self.value3 = 0.
      if self.last_event is None:
        self.last_event = False
    else:
      self.generator_id = ''
      self.ID = 0
      self.type = ''
      self.generation_date = genpy.Time()
      self.gen_time = ''
      self.completed_date = genpy.Time()
      self.compl_time = ''
      self.route = []
      self.split_attribute1 = ''
      self.split1 = 0.
      self.split_attribute2 = ''
      self.split2 = 0.
      self.split_attribute3 = ''
      self.split3 = 0.
      self.attribute2 = ''
      self.value2 = 0.
      self.attribute3 = ''
      self.value3 = 0.
      self.last_event = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.generator_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ID
      buff.write(_get_struct_i().pack(_x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.generation_date.secs, _x.generation_date.nsecs))
      _x = self.gen_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.completed_date.secs, _x.completed_date.nsecs))
      _x = self.compl_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.route)
      buff.write(_struct_I.pack(length))
      for val1 in self.route:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.split_attribute1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.split1
      buff.write(_get_struct_f().pack(_x))
      _x = self.split_attribute2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.split2
      buff.write(_get_struct_f().pack(_x))
      _x = self.split_attribute3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.split3
      buff.write(_get_struct_f().pack(_x))
      _x = self.attribute2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.value2
      buff.write(_get_struct_f().pack(_x))
      _x = self.attribute3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fB().pack(_x.value3, _x.last_event))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.generation_date is None:
        self.generation_date = genpy.Time()
      if self.completed_date is None:
        self.completed_date = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.generator_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.generator_id = str[start:end]
      start = end
      end += 4
      (self.ID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.generation_date.secs, _x.generation_date.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gen_time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gen_time = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.completed_date.secs, _x.completed_date.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.compl_time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.compl_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.route = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.route.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.split_attribute1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.split_attribute1 = str[start:end]
      start = end
      end += 4
      (self.split1,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.split_attribute2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.split_attribute2 = str[start:end]
      start = end
      end += 4
      (self.split2,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.split_attribute3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.split_attribute3 = str[start:end]
      start = end
      end += 4
      (self.split3,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.attribute2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.attribute2 = str[start:end]
      start = end
      end += 4
      (self.value2,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.attribute3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.attribute3 = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.value3, _x.last_event,) = _get_struct_fB().unpack(str[start:end])
      self.last_event = bool(self.last_event)
      self.generation_date.canon()
      self.completed_date.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.generator_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ID
      buff.write(_get_struct_i().pack(_x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.generation_date.secs, _x.generation_date.nsecs))
      _x = self.gen_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.completed_date.secs, _x.completed_date.nsecs))
      _x = self.compl_time
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.route)
      buff.write(_struct_I.pack(length))
      for val1 in self.route:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.split_attribute1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.split1
      buff.write(_get_struct_f().pack(_x))
      _x = self.split_attribute2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.split2
      buff.write(_get_struct_f().pack(_x))
      _x = self.split_attribute3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.split3
      buff.write(_get_struct_f().pack(_x))
      _x = self.attribute2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.value2
      buff.write(_get_struct_f().pack(_x))
      _x = self.attribute3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fB().pack(_x.value3, _x.last_event))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.generation_date is None:
        self.generation_date = genpy.Time()
      if self.completed_date is None:
        self.completed_date = genpy.Time()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.generator_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.generator_id = str[start:end]
      start = end
      end += 4
      (self.ID,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.generation_date.secs, _x.generation_date.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gen_time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gen_time = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.completed_date.secs, _x.completed_date.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.compl_time = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.compl_time = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.route = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.route.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.split_attribute1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.split_attribute1 = str[start:end]
      start = end
      end += 4
      (self.split1,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.split_attribute2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.split_attribute2 = str[start:end]
      start = end
      end += 4
      (self.split2,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.split_attribute3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.split_attribute3 = str[start:end]
      start = end
      end += 4
      (self.split3,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.attribute2 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.attribute2 = str[start:end]
      start = end
      end += 4
      (self.value2,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.attribute3 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.attribute3 = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.value3, _x.last_event,) = _get_struct_fB().unpack(str[start:end])
      self.last_event = bool(self.last_event)
      self.generation_date.canon()
      self.completed_date.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fB = None
def _get_struct_fB():
    global _struct_fB
    if _struct_fB is None:
        _struct_fB = struct.Struct("<fB")
    return _struct_fB
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
