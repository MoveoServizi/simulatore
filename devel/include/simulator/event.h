// Generated by gencpp from file simulator/event.msg
// DO NOT EDIT!


#ifndef SIMULATOR_MESSAGE_EVENT_H
#define SIMULATOR_MESSAGE_EVENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simulator
{
template <class ContainerAllocator>
struct event_
{
  typedef event_<ContainerAllocator> Type;

  event_()
    : generator_id()
    , ID(0)
    , type()
    , generation_date()
    , gen_time()
    , completed_date()
    , compl_time()
    , route()
    , split_attribute1()
    , split1(0.0)
    , split_attribute2()
    , split2(0.0)
    , split_attribute3()
    , split3(0.0)
    , attribute2()
    , value2(0.0)
    , attribute3()
    , value3(0.0)
    , last_event(false)
    , first_event(false)  {
    }
  event_(const ContainerAllocator& _alloc)
    : generator_id(_alloc)
    , ID(0)
    , type(_alloc)
    , generation_date()
    , gen_time(_alloc)
    , completed_date()
    , compl_time(_alloc)
    , route(_alloc)
    , split_attribute1(_alloc)
    , split1(0.0)
    , split_attribute2(_alloc)
    , split2(0.0)
    , split_attribute3(_alloc)
    , split3(0.0)
    , attribute2(_alloc)
    , value2(0.0)
    , attribute3(_alloc)
    , value3(0.0)
    , last_event(false)
    , first_event(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _generator_id_type;
  _generator_id_type generator_id;

   typedef int32_t _ID_type;
  _ID_type ID;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef ros::Time _generation_date_type;
  _generation_date_type generation_date;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _gen_time_type;
  _gen_time_type gen_time;

   typedef ros::Time _completed_date_type;
  _completed_date_type completed_date;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _compl_time_type;
  _compl_time_type compl_time;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _route_type;
  _route_type route;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _split_attribute1_type;
  _split_attribute1_type split_attribute1;

   typedef float _split1_type;
  _split1_type split1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _split_attribute2_type;
  _split_attribute2_type split_attribute2;

   typedef float _split2_type;
  _split2_type split2;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _split_attribute3_type;
  _split_attribute3_type split_attribute3;

   typedef float _split3_type;
  _split3_type split3;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _attribute2_type;
  _attribute2_type attribute2;

   typedef float _value2_type;
  _value2_type value2;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _attribute3_type;
  _attribute3_type attribute3;

   typedef float _value3_type;
  _value3_type value3;

   typedef uint8_t _last_event_type;
  _last_event_type last_event;

   typedef uint8_t _first_event_type;
  _first_event_type first_event;





  typedef boost::shared_ptr< ::simulator::event_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simulator::event_<ContainerAllocator> const> ConstPtr;

}; // struct event_

typedef ::simulator::event_<std::allocator<void> > event;

typedef boost::shared_ptr< ::simulator::event > eventPtr;
typedef boost::shared_ptr< ::simulator::event const> eventConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simulator::event_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simulator::event_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simulator::event_<ContainerAllocator1> & lhs, const ::simulator::event_<ContainerAllocator2> & rhs)
{
  return lhs.generator_id == rhs.generator_id &&
    lhs.ID == rhs.ID &&
    lhs.type == rhs.type &&
    lhs.generation_date == rhs.generation_date &&
    lhs.gen_time == rhs.gen_time &&
    lhs.completed_date == rhs.completed_date &&
    lhs.compl_time == rhs.compl_time &&
    lhs.route == rhs.route &&
    lhs.split_attribute1 == rhs.split_attribute1 &&
    lhs.split1 == rhs.split1 &&
    lhs.split_attribute2 == rhs.split_attribute2 &&
    lhs.split2 == rhs.split2 &&
    lhs.split_attribute3 == rhs.split_attribute3 &&
    lhs.split3 == rhs.split3 &&
    lhs.attribute2 == rhs.attribute2 &&
    lhs.value2 == rhs.value2 &&
    lhs.attribute3 == rhs.attribute3 &&
    lhs.value3 == rhs.value3 &&
    lhs.last_event == rhs.last_event &&
    lhs.first_event == rhs.first_event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simulator::event_<ContainerAllocator1> & lhs, const ::simulator::event_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simulator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::simulator::event_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simulator::event_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::event_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simulator::event_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::event_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simulator::event_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simulator::event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5783b9c2f01c2af0c22209cf660c120e";
  }

  static const char* value(const ::simulator::event_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5783b9c2f01c2af0ULL;
  static const uint64_t static_value2 = 0xc22209cf660c120eULL;
};

template<class ContainerAllocator>
struct DataType< ::simulator::event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simulator/event";
  }

  static const char* value(const ::simulator::event_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simulator::event_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string generator_id\n"
"int32 ID\n"
"string type\n"
"time generation_date\n"
"string gen_time\n"
"time completed_date\n"
"string compl_time\n"
"string[] route\n"
"string split_attribute1\n"
"float32 split1\n"
"string split_attribute2\n"
"float32 split2\n"
"string split_attribute3\n"
"float32 split3\n"
"string attribute2\n"
"float32 value2\n"
"string attribute3\n"
"float32 value3\n"
"bool last_event\n"
"bool first_event\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::simulator::event_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simulator::event_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.generator_id);
      stream.next(m.ID);
      stream.next(m.type);
      stream.next(m.generation_date);
      stream.next(m.gen_time);
      stream.next(m.completed_date);
      stream.next(m.compl_time);
      stream.next(m.route);
      stream.next(m.split_attribute1);
      stream.next(m.split1);
      stream.next(m.split_attribute2);
      stream.next(m.split2);
      stream.next(m.split_attribute3);
      stream.next(m.split3);
      stream.next(m.attribute2);
      stream.next(m.value2);
      stream.next(m.attribute3);
      stream.next(m.value3);
      stream.next(m.last_event);
      stream.next(m.first_event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct event_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simulator::event_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simulator::event_<ContainerAllocator>& v)
  {
    s << indent << "generator_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.generator_id);
    s << indent << "ID: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ID);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "generation_date: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.generation_date);
    s << indent << "gen_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.gen_time);
    s << indent << "completed_date: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.completed_date);
    s << indent << "compl_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.compl_time);
    s << indent << "route[]" << std::endl;
    for (size_t i = 0; i < v.route.size(); ++i)
    {
      s << indent << "  route[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.route[i]);
    }
    s << indent << "split_attribute1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.split_attribute1);
    s << indent << "split1: ";
    Printer<float>::stream(s, indent + "  ", v.split1);
    s << indent << "split_attribute2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.split_attribute2);
    s << indent << "split2: ";
    Printer<float>::stream(s, indent + "  ", v.split2);
    s << indent << "split_attribute3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.split_attribute3);
    s << indent << "split3: ";
    Printer<float>::stream(s, indent + "  ", v.split3);
    s << indent << "attribute2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.attribute2);
    s << indent << "value2: ";
    Printer<float>::stream(s, indent + "  ", v.value2);
    s << indent << "attribute3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.attribute3);
    s << indent << "value3: ";
    Printer<float>::stream(s, indent + "  ", v.value3);
    s << indent << "last_event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.last_event);
    s << indent << "first_event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.first_event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMULATOR_MESSAGE_EVENT_H
